/**
 * This file and a proportion of its content is copyright of Nucleus Software Exports Limited - ï¿½ 2012. All rights reserved.
 * Any redistribution or reproduction of part or all of the contents in any form is prohibited other than the following:
 * - you cannot print or download to a local hard disk extract contents either part or full for personal/ commercial/
 * academic or any other use
 * - you may not copy the content to individual/ third parties for any type of use, either as compiled or source format
 * without the knowledge and consent of Nucleus Software
 * - You may not, except with our express written permission, distribute or commercially exploit the content. Nor may you
 * transmit it or store it in any other web site or other form of electronic retrieval system.
 */
package com.nucleus.core.formsConfiguration.validationcomponent;

import com.nucleus.core.dynamicform.service.DynamicFormValidationUtility;
import com.nucleus.core.formsConfiguration.FormContainerVO;
import com.nucleus.core.formsConfiguration.FormVO;

public abstract class AbstractFormValidationThenExpressionStrategy {

	public abstract String execute(String targetFieldId, FormVO formVo,FormValidationExpression expression) throws Exception; 
	
}

class FormValidationErrorMessageThenExpressionStrategy extends AbstractFormValidationThenExpressionStrategy{

	@Override
	public String execute(String targetFieldId,FormVO formVo, FormValidationExpression expression) throws Exception {
		/**
		 * for now we will show alert box and stop the save action of the system
		 */
		return "alert('"+expression.getExpression()+"'); return ;";
	}
	
}

class FormValidationStateChangeThenExpressionStrategy extends AbstractFormValidationThenExpressionStrategy{

	@Override
	public String execute(String targetFieldId,FormVO formVo, FormValidationExpression expression) throws Exception {
		/**
		 *  depending upon the combination of state change action and field type we have to get experssion
		 *  no of state change * type of tag
		 */
		FormContainerVO fieldType = DynamicFormValidationUtility.getFormComponentbyKey(formVo, targetFieldId);
		if(fieldType == null || fieldType.getFieldType() == null){
			throw new Exception("either no FormContainer found for :"+expression.getExpression()+" or Field type is not set for FormcontainerVO");
		}
		String actionType = expression.getExpression();
		String containerType = fieldType.getFieldType();
		if(actionType == null || containerType == null){
			throw new Exception("No Container type or state change action type is received");
		}
		AbstractJavascriptStateChangeExpressionGenerator generator = FormValidationDataTypeOperatorMap.getThenActionStateChangeGeneratorByComponentTypeAndAction(new Tuple_2(containerType, actionType));
		if(generator == null){
			throw new Exception("No Generator found for type :"+containerType+" for action :"+actionType);
		}
		/*String cloneRowStatus = DynamicFormValidationUtility.getClonedRowStatus(fieldType.getComponentDisplayKey());
		String fieldIdOnUI = targetFieldId+"_"+formVo.getFormName()+"_"+cloneRowStatus;*/
		return generator.generate(fieldType,formVo);
	}
	
}

class FormValidationAssignValueThenExpressionStrategy extends AbstractFormValidationThenExpressionStrategy{

	@Override
	public String execute(String targetFieldId,FormVO formVo, FormValidationExpression expression) throws Exception {
		
		/**
		 * step 1-> get expression to generate new value that will be assigned
		 *  for Constant value ->1 selector
		 *  for simple value -> type of selector depending upon the type of field from where we have to take value
		 *  for complex type -> till now we do not have any support
		 * step 2 -> get the value expression generated by step 1 and create the expression to update value
		 * this will depend on the type of targetfield type 
		 */
		String valueExpression = FormValidationThenAssignmentValueSelectExpStrExecutor.execute(formVo, expression);
		if(valueExpression == null){
			throw new Exception("generated new Value expression is null");
		}
		return JavaScriptAssignValueExpressionGeneratorExecutor.execute(targetFieldId, formVo, valueExpression);
	}
	
}
