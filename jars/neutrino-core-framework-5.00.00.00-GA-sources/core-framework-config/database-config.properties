# database schema for hibernate.hbm2ddl.auto=update in Hibernate.
# In case of Oracle mention UserName in hibernate.default_schema below. Leave it empty for mysql

database.driver.class=oracle.jdbc.OracleDriver
database.connection.url=jdbc:oracle:thin:@10.1.61.132:1527:NDLIC13
database.username=FW_DEV_35_CM
database.password=FW_DEV_35_CM

hibernate.default_schema=FW_DEV_35_CM



#database.driver.class=com.mysql.jdbc.Driver
#database.connection.url=jdbc:mysql://localhost:3306/dem?rewriteBatchedStatements=true
#database.username=root
#database.password=root#CAS!

#Connection properties for postgres
#database.driver.class=org.postgresql.Driver
#database.connection.url=jdbc:postgresql://10.1.50.58:5432/database_name
#database.username=user
#database.password=password

# for synonym enabled mode 
#masters.database.connection.url=jdbc:postgresql://10.1.50.58:5432/synonym
#masters.database.username=master
#masters.database.password=master
#database.master.schemaname=master_schema_name
#Provide jndiname is profile is either app-server-provided or app-server-cluster-provided prefix 'java:/comp/env/' needs to be added if application server is tomcat
masters.jndiname=jdbc/localcm
#database.app.schemaname=schema_name
#Do not specify any value for db other then postgres
database.app.schemaname=

#Properties Sample for Synonym
#masters.database.connection.url=jdbc:oracle:thin:@10.1.61.162:1521:NDLIC10
#masters.database.username=FW_30_HKANT_2
#masters.database.password=FW_30_HKANT_2
#database.master.schemaname=FW_30_HKANT_2
#masters.schemaname=FW_30_HKANT_2
#masters.db.link.name=FW_30_HKANT_2_LINK
#db.link.name=

#masters1.database.connection.url=jdbc:oracle:thin:@10.1.61.162:1521:NDLIC10
#masters1.database.username=FW_30_HKANT_3
#masters1.database.password=FW_30_HKANT_3
#database.master.schemaname=FW_30_HKANT_3
#masters1.schemaname=FW_30_HKANT_3
#masters1.db.link.name=FW_30_HKANT_3_LINK


#connection pool settings for application provided connection pooling e.g., tomcat-dbcp
database.connection.pool.maxIdle=8
database.connection.pool.maxActive=50
database.connection.pool.maxWait=120000
database.connection.pool.removeAbandoned=true
database.connection.pool.testWhileIdle=false
database.connection.pool.validationQuery=select 1 from dual
database.connection.pool.testOnBorrow=false

#Put 'oracle' for Oracle database and 'mysql' for MySQL database (case sensitive) and 'postgres' for postgres
#database.type=mysql
database.type=oracle
#database.type=postgres

#Put 'com.nucleus.persistence.sequence.MySQLSequenceGenerator' for MySql
#Put 'com.nucleus.persistence.sequence.OracleSequenceGenerator' for Oracle
#Put 'com.nucleus.persistence.sequence.PostGreSequenceGenerator' for PostgreSQL
#database.sequence.generator.class=com.nucleus.persistence.sequence.MySQLSequenceGenerator
database.sequence.generator.class=com.nucleus.persistence.sequence.OracleSequenceGenerator

mongo.database.name=neutrino-datastore
mongo.database.host=10.1.50.58
mogo.database.port=27017

jpa.show.sql=true
jpa.generate.ddl=true
hibernate.format_sql=false
#Put com.nucleus.persistence.customdialect.PostgreSQLCustomDialect for postgres
#hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
hibernate.dialect=com.nucleus.core.hibernate.dialect.NeutrinoHibernateOracle10gDialect
# In tomcat/jetty with resource local transactions, ehcache is used as hibernate L2 cache
ehcache.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory
# In JTA environment (within or without EE app servers) , infinispan is used as L2 cache
#appserver.hibernate.cache.region.factory_class=org.infinispan.hibernate.cache.main.InfinispanRegionFactory
#appserver.hibernate.cache.region.factory_class=com.nucleus.infinispan.console.custom.NeutrinoInfinispanRegionFactory
appserver.hibernate.cache.region.factory_class=hibernate-ehcache-redis-singleton
ehcache.hibernate.cache.provider_configuration=config-properties/ehcache.xml
ehcache.hibernate.cache.lock_timeout=30000
hibernate.cache.redis.cfg=config-properties/redis-ehcache-config.properties
infinispan.hibernate.cache.cfg=neutrino-infinispan.xml
infinispan.cluster.hibernate.cache.cfg=neutrino-cluster-infinispan.xml
hibernate.cache.region_prefix=neutrino.jpa.cache
hibernate.use_sql_comments=true
hibernate.hbm2ddl.auto=create
activiti.database.schema.update=true
hibernate.use.second.level.cache=true
hibernate.jdbc.batch_size=30
hibernate.order_inserts=true
hibernate.order_updates=true
hibernate.cache.use_query_cache=true
hibernate.generate.second.level.cache.stats=true
hibernate.search.indexing_strategy=event
default.hibernate.search.default.directory_provider=filesystem
appserver.hibernate.search.default.directory_provider=infinispan
appserver.hibernate.search.infinispan.configuration_resourcename=neutrino-hibernatesearch-infinispan.xml
# For Weblogic in memory
#hibernate.search.default.locking_strategy=single
# For Tomcat/Weblogic on FileSystem
hibernate.search.default.locking_strategy=native
hibernate.search.default.indexBase=target/hibernate-search_indexes
hibernate.search.generate_statistics=true
hibernate.session.events.log=false
hibernate.search.jmx_enabled=false
hibernate.search.worker.execution=async
hibernate.search.worker.thread_pool.size=1
hibernate.search.default.optimizer.transaction_limit.max=100
hibernate.search.default.exclusive_index_use=false
hibernate.query.startup_check=true
hibernate.cache.infinispan.statistics=false
#custom scanner that handles JBoss vfs protocol as well 
hibernate.ejb.resource_scanner=com.nucleus.core.database.hibernate.NeutrinoScanner

#Custom Interceptor for DirtyChecking in case of @PreUpdate
hibernate.ejb.interceptor=com.nucleus.persistence.interceptor.NeutrinoCustomHibernateInterceptor


# Below configuration is important when deploying in Application server. We fully utilize the app server facilities for JTA, Datasources( backed by connection pool).
# When deploying in such environment you need to activate Spring profile "app-server-provided" typically by modifying web.xml or by providing JVM parameter (less preferred)


# Whether transaction is managed by JTA - If true then JtaTransactionManager is used, else JpaTransactionManager is used
transaction.management.jtaEnabled=false
#JPA transaction manager abstraction for Spring.  Will be picked up if transaction.management.jtaEnabled is false
jpa.transaction.manager.class=org.springframework.orm.jpa.JpaTransactionManager
#JTA transaction manager abstraction for Spring. Will be picked up if transaction.management.jtaEnabled is true
jta.transaction.manager.class=org.springframework.transaction.jta.JtaTransactionManager
#JTA transaction manager for weblogic application server
#jta.transaction.manager.class=org.springframework.transaction.jta.WebLogicJtaTransactionManager
#JTA transaction manager for websphere application server
#jta.transaction.manager.class=org.springframework.transaction.jta.WebSphereUowTransactionManager

# JTA platform for various app servers
hibernate.transaction.jta.platform=org.hibernate.service.jta.platform.internal.JBossAppServerJtaPlatform
#hibernate.transaction.jta.platform=org.hibernate.service.jta.platform.internal.WeblogicJtaPlatform
#hibernate.transaction.jta.platform=org.hibernate.service.jta.platform.internal.WebSphereJtaPlatform (For GCC,GCD and Integration)
#hibernate.transaction.jta.platform=org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform (For CAS)

#Transaction timeout for dev with JTA profile for Jetty and Tomcat(in seconds)
dev.jta.transaction.timeout=7200

#JNDI Name for the datasource created in app server
database.dataSource.name=java:jboss/datasources/FODS

#Put 'org.dbunit.ext.oracle.Oracle10DataTypeFactory' for Oracle 10g and above database.
#Put 'org.dbunit.ext.oracle.OracleDataTypeFactory' for Oracle database version below 10g
#Put 'org.dbunit.ext.mysql.MySqlDataTypeFactory' for MySQL database
#Put 'org.dbunit.ext.postgresql.PostgresqlDataTypeFactory' for postgres
#database.dbunit.datatype.factory.class=org.dbunit.ext.mysql.MySqlDataTypeFactory
database.dbunit.datatype.factory.class=org.dbunit.ext.oracle.Oracle10DataTypeFactory

#To enable predefined default seeding operations, set 'turn.all.seed.off=false'.
#To disable all seeding operations, i.e. to deploy with SeedOff profile, set 'turn.all.seed.off=true'.
turn.all.seed.off=true

#To be used in place of disabling Supports Global Transactions
hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION


hibernate.search.default.indexwriter.infostream=false
hibernate.search.default.worker.backend=local

#JMS Connection Factory Configurations
jms.broker.url=tcp://localhost:61689
jms.broker.username=admin
jms.broker.password=admin

#hibernate search cluster configuartion using JMS
hibernate.search.default.sourceBase=target/hibernate-search_indexes_source
hibernate.search.default.worker.jms.queue=hibernateSearchQueue
hibernate.search.default.refresh=30