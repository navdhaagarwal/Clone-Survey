<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                      http://www.springframework.org/schema/beans/spring-beans.xsd
					  http://www.springframework.org/schema/security/oauth2
					  http://www.springframework.org/schema/security/spring-security-oauth2.xsd
					  http://www.springframework.org/schema/security
					  http://www.springframework.org/schema/security/spring-security.xsd
                      http://www.springframework.org/schema/context 					  
                      http://www.springframework.org/schema/context/spring-context.xsd
					  http://www.springframework.org/schema/mvc 
					  http://www.springframework.org/schema/mvc/spring-mvc.xsd">


	<oauth:authorization-server
		client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:refresh-token />
		<oauth:custom-grant token-granter-ref="customResourceOwnerPasswordTokenGranter" />
		<oauth:custom-grant token-granter-ref="customAnonymousTokenGranter" />
		<oauth:custom-grant token-granter-ref="federatedAuthorizationCodeTokenGranter"/>
	</oauth:authorization-server>

	<bean id="customResourceOwnerPasswordTokenGranter" class="com.nucleus.web.security.oauth.CustomResourceOwnerPasswordTokenGranter">
		<constructor-arg ref="authManager" />
		<constructor-arg ref="tokenServices" />
		<constructor-arg ref="clientDetails" />
		<constructor-arg ref="oAuth2RequestFactory" />
	
		<property name="authenticationManagerMap">
			<map>
				<entry key="db" value-ref="authdbManager"></entry>
				<entry key="ldap" value-ref="authldapManager"></entry>
			</map>
		</property>
	</bean>

	<bean id="customAnonymousTokenGranter"
		class="com.nucleus.web.security.oauth.CustomAnonymousTokenGranter">
		<constructor-arg ref="authManager" />
		<constructor-arg ref="tokenServices" />
		<constructor-arg ref="clientDetails" />
		<constructor-arg ref="oAuth2RequestFactory" />
	</bean>
	
	<bean id="federatedAuthorizationCodeTokenGranter" class="com.nucleus.web.security.oauth.FederatedAuthorizationCodeTokenGranter">
		<constructor-arg ref="tokenServices" />
		<constructor-arg ref="clientDetails" />
		<constructor-arg ref="oAuth2RequestFactory" />
	</bean>
	
	<bean id="clientCredentialsTokenEndpointFilter"
		class="com.nucleus.web.security.oauth.CustomClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<security:authentication-manager id="clientAuthenticationManager">
		<security:authentication-provider
			user-service-ref="clientDetailsUserService" >
				<security:password-encoder ref="plaintextPasswordEncoderOauth2"></security:password-encoder>
			</security:authentication-provider>
	</security:authentication-manager>


	<bean id="plaintextPasswordEncoderOauth2"
		class="org.springframework.security.crypto.password.NoOpPasswordEncoder" factory-method="getInstance">
	</bean>


	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>

	<bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="oauthAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="oauth" />
	</bean>

	<bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	
	<bean id="customOAuth2TokenExtractor"
		class="com.nucleus.security.oauth.token.extractor.CustomOAuth2TokenExtractor" />
		
	<bean id="tokenServices"
		class="com.nucleus.web.security.oauth.token.service.NeutrinoTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="accessTokenValiditySeconds" value="${accessTokenValiditySeconds}" />
		<property name="refreshTokenValiditySeconds" value="${refreshTokenValiditySeconds}" />
		<property name="clientDetailsService" ref="clientDetails" />

	</bean>

	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${database.driver.class}" />
		<property name="url" value="${database.connection.url}" />
		<property name="username" value="${database.username}" />

		<property name="password" value="${database.password}" />
	</bean>

	<bean id="tokenStore"
		class=" com.nucleus.security.oauth.dao.CustomOauthTokenStoreDAO">
	</bean>
	<bean id="oauthConcurrentSessionControlStrategy"
		class=" com.nucleus.web.security.oauth.OauthConcurrentSessionControlStrategyImpl">
	</bean>




	<bean id="oAuth2RequestFactory"
		class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
		<constructor-arg ref="clientDetails" />
	</bean>

<!-- 
	<bean id="oauthManager" class="com.nucleus.web.security.CustomAuthenticationManager">
		<constructor-arg name="providers">
			<list>
				<ref bean="oauthDBBasedAuthenticationProvider" />
			</list>
		</constructor-arg>
		<property name="dbAuthenticationProvider" ref="oauthDBBasedAuthenticationProvider" />
	 	<property name="ldapAuthenticationProvider" ref="activeDirectoryAuthenticationProvider"/>
		<property name="authenticationMode" value="ldap" /> 
	</bean> -->



	<bean id="userApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
		<property name="requestFactory" ref="oAuth2RequestFactory" />
		<property name="tokenStore" ref="tokenStore" />
	</bean>
	<!-- pattern="/oauth/*" -->
	 <security:http create-session="stateless" pattern="/oauth/token" authentication-manager-ref="clientAuthenticationManager">
		<security:intercept-url pattern="/oauth/token" />
		<security:anonymous enabled="true" />
		<security:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		 <security:custom-filter ref="clientCredentialsTokenEndpointFilter"	after="BASIC_AUTH_FILTER" />   

		<security:csrf disabled="true" />
	</security:http>
</beans>
